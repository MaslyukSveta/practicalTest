package com.clearsolutions.practicalTest.service;

import com.clearsolutions.practicalTest.exception.ResourceNotFoundException;
import com.clearsolutions.practicalTest.model.User;
import com.clearsolutions.practicalTest.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.Period;
import java.util.List;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Service class for managing users.
 * Provides the business logic for user operations backed by a UserRepository.
 */
@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

    @Value("${user.age.minimum}")
    private int minimumAge;

    /**
     * Retrieves all users from the repository.
     * @return a list of all users
     */
    public List<User> findAllUsers() {
        return userRepository.findAll();
    }

    /**
     * Retrieves a single user by their ID.
     * @param id the ID of the user to retrieve
     * @return the found user
     * @throws ResourceNotFoundException if no user is found with the provided ID
     */
    public User findUserById(Long id) {
        logger.debug("Attempting to find user with ID: {}", id);
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
        logger.info("User found with ID: {}", user.getId());
        return user;
    }

    /**
     * Saves a new or existing user to the repository after validating their age.
     * If the user's age is below the minimum required age, it throws an IllegalArgumentException.
     *
     * @param user the user to save
     * @return the saved user object, including any autogenerated fields like ID
     * @throws IllegalArgumentException if the user's age is less than the required minimum age
     */
    public User saveUser(User user) {
        logger.debug("Attempting to save user: {}", user);
        validateAge(user.getBirthDate());
        User savedUser = userRepository.save(user);
        logger.info("User saved with ID: {}", savedUser.getId());
        return savedUser;
    }

    /**
     * Validates the age of the user based on their birthdate.
     * The user must be at least the age specified by 'minimumAge'.
     *
     * @param birthDate the birthdate of the user
     * @throws IllegalArgumentException if the user is younger than the minimum age
     */
    private void validateAge(LocalDate birthDate) {
        Period age = Period.between(birthDate, LocalDate.now());
        if (age.getYears() < minimumAge) {  // Assuming the age is directly placed here; use property injection in practice.
            logger.warn("User age validation failed for birth date: {}", birthDate);
            throw new IllegalArgumentException("User must be at least 18 years old.");
        }
    }

    /**
     * Updates an existing user's details.
     * @param id the ID of the user to update
     * @param userDetails the details to update the user with
     * @return the updated user
     * @throws ResourceNotFoundException if no user is found with the provided ID
     */
    public User updateUser(Long id, User userDetails) {
        logger.debug("Attempting to update user with ID: {}", id);
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
        logger.debug("User found with ID: {}. Proceeding with update.", id);

        user.setEmail(userDetails.getEmail());
        user.setFirstName(userDetails.getFirstName());
        user.setLastName(userDetails.getLastName());
        user.setBirthDate(userDetails.getBirthDate());
        user.setAddress(userDetails.getAddress());
        user.setPhoneNumber(userDetails.getPhoneNumber());

        User updatedUser = userRepository.save(user);
        logger.info("User updated successfully with ID: {}", updatedUser.getId());
        return updatedUser;
    }
    /**
     * Deletes a user by their ID.
     * @param id the ID of the user to delete
     * @throws ResourceNotFoundException if no user is found with the provided ID
     */
    public void deleteUser(Long id) {
        logger.debug("Attempting to delete user with ID: {}", id);
        userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
        userRepository.deleteById(id);
        logger.info("User deleted successfully with ID: {}", id);
    }

    /**
     * Finds and returns a list of users whose birthdates fall within the specified range.
     * This method logs the process and results, and also validates the date range.
     *
     * @param from the starting date of the range (inclusive).
     * @param to the ending date of the range (inclusive).
     * @return a list of users meeting the birthdate criteria.
     * @throws IllegalArgumentException if the 'from' date is after the 'to' date.
     */
    public List<User> findUsersByBirthDateRange(LocalDate from, LocalDate to) {
        logger.debug("Searching for users with birthdates between {} and {}", from, to);

        if (from.isAfter(to)) {
            logger.error("Invalid date range: Start date {} is after end date {}", from, to);
            throw new IllegalArgumentException("Start date must be before end date.");
        }

        List<User> users = userRepository.findAll().stream()
                .filter(user -> !user.getBirthDate().isBefore(from) && !user.getBirthDate().isAfter(to))
                .collect(Collectors.toList());

        logger.info("Found {} users with birthdates between {} and {}", users.size(), from, to);
        return users;
    }

}